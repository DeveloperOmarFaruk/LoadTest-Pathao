/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 64.0, "minX": 0.0, "maxY": 14658.0, "series": [{"data": [[0.0, 74.0], [0.1, 74.0], [0.2, 75.0], [0.3, 75.0], [0.4, 75.0], [0.5, 76.0], [0.6, 76.0], [0.7, 77.0], [0.8, 77.0], [0.9, 77.0], [1.0, 78.0], [1.1, 78.0], [1.2, 78.0], [1.3, 78.0], [1.4, 78.0], [1.5, 78.0], [1.6, 78.0], [1.7, 79.0], [1.8, 79.0], [1.9, 79.0], [2.0, 79.0], [2.1, 79.0], [2.2, 80.0], [2.3, 80.0], [2.4, 80.0], [2.5, 80.0], [2.6, 80.0], [2.7, 80.0], [2.8, 80.0], [2.9, 80.0], [3.0, 80.0], [3.1, 80.0], [3.2, 81.0], [3.3, 81.0], [3.4, 81.0], [3.5, 81.0], [3.6, 81.0], [3.7, 81.0], [3.8, 81.0], [3.9, 81.0], [4.0, 81.0], [4.1, 81.0], [4.2, 82.0], [4.3, 82.0], [4.4, 82.0], [4.5, 82.0], [4.6, 82.0], [4.7, 82.0], [4.8, 82.0], [4.9, 82.0], [5.0, 83.0], [5.1, 83.0], [5.2, 83.0], [5.3, 83.0], [5.4, 83.0], [5.5, 83.0], [5.6, 83.0], [5.7, 84.0], [5.8, 84.0], [5.9, 84.0], [6.0, 84.0], [6.1, 84.0], [6.2, 84.0], [6.3, 84.0], [6.4, 85.0], [6.5, 85.0], [6.6, 85.0], [6.7, 85.0], [6.8, 85.0], [6.9, 85.0], [7.0, 86.0], [7.1, 86.0], [7.2, 86.0], [7.3, 86.0], [7.4, 86.0], [7.5, 86.0], [7.6, 86.0], [7.7, 87.0], [7.8, 87.0], [7.9, 87.0], [8.0, 88.0], [8.1, 88.0], [8.2, 88.0], [8.3, 88.0], [8.4, 89.0], [8.5, 91.0], [8.6, 91.0], [8.7, 91.0], [8.8, 91.0], [8.9, 92.0], [9.0, 92.0], [9.1, 92.0], [9.2, 94.0], [9.3, 94.0], [9.4, 94.0], [9.5, 94.0], [9.6, 94.0], [9.7, 97.0], [9.8, 97.0], [9.9, 98.0], [10.0, 98.0], [10.1, 98.0], [10.2, 99.0], [10.3, 99.0], [10.4, 99.0], [10.5, 99.0], [10.6, 99.0], [10.7, 99.0], [10.8, 99.0], [10.9, 99.0], [11.0, 99.0], [11.1, 100.0], [11.2, 100.0], [11.3, 100.0], [11.4, 101.0], [11.5, 101.0], [11.6, 102.0], [11.7, 102.0], [11.8, 102.0], [11.9, 102.0], [12.0, 102.0], [12.1, 104.0], [12.2, 108.0], [12.3, 108.0], [12.4, 109.0], [12.5, 115.0], [12.6, 115.0], [12.7, 120.0], [12.8, 120.0], [12.9, 121.0], [13.0, 125.0], [13.1, 125.0], [13.2, 127.0], [13.3, 127.0], [13.4, 134.0], [13.5, 137.0], [13.6, 137.0], [13.7, 139.0], [13.8, 139.0], [13.9, 141.0], [14.0, 142.0], [14.1, 142.0], [14.2, 148.0], [14.3, 148.0], [14.4, 149.0], [14.5, 152.0], [14.6, 152.0], [14.7, 153.0], [14.8, 153.0], [14.9, 156.0], [15.0, 156.0], [15.1, 156.0], [15.2, 164.0], [15.3, 164.0], [15.4, 168.0], [15.5, 170.0], [15.6, 170.0], [15.7, 174.0], [15.8, 174.0], [15.9, 176.0], [16.0, 178.0], [16.1, 178.0], [16.2, 178.0], [16.3, 178.0], [16.4, 182.0], [16.5, 184.0], [16.6, 184.0], [16.7, 185.0], [16.8, 185.0], [16.9, 189.0], [17.0, 194.0], [17.1, 194.0], [17.2, 194.0], [17.3, 194.0], [17.4, 198.0], [17.5, 206.0], [17.6, 206.0], [17.7, 208.0], [17.8, 208.0], [17.9, 211.0], [18.0, 219.0], [18.1, 219.0], [18.2, 229.0], [18.3, 229.0], [18.4, 231.0], [18.5, 232.0], [18.6, 232.0], [18.7, 254.0], [18.8, 254.0], [18.9, 266.0], [19.0, 266.0], [19.1, 268.0], [19.2, 272.0], [19.3, 272.0], [19.4, 275.0], [19.5, 275.0], [19.6, 276.0], [19.7, 283.0], [19.8, 283.0], [19.9, 286.0], [20.0, 286.0], [20.1, 287.0], [20.2, 288.0], [20.3, 288.0], [20.4, 289.0], [20.5, 289.0], [20.6, 299.0], [20.7, 303.0], [20.8, 303.0], [20.9, 308.0], [21.0, 308.0], [21.1, 309.0], [21.2, 311.0], [21.3, 311.0], [21.4, 312.0], [21.5, 312.0], [21.6, 325.0], [21.7, 333.0], [21.8, 333.0], [21.9, 340.0], [22.0, 340.0], [22.1, 360.0], [22.2, 379.0], [22.3, 379.0], [22.4, 406.0], [22.5, 406.0], [22.6, 407.0], [22.7, 421.0], [22.8, 421.0], [22.9, 442.0], [23.0, 442.0], [23.1, 466.0], [23.2, 492.0], [23.3, 492.0], [23.4, 494.0], [23.5, 494.0], [23.6, 519.0], [23.7, 541.0], [23.8, 541.0], [23.9, 557.0], [24.0, 557.0], [24.1, 575.0], [24.2, 636.0], [24.3, 636.0], [24.4, 650.0], [24.5, 650.0], [24.6, 688.0], [24.7, 689.0], [24.8, 689.0], [24.9, 806.0], [25.0, 806.0], [25.1, 861.0], [25.2, 907.0], [25.3, 907.0], [25.4, 967.0], [25.5, 967.0], [25.6, 984.0], [25.7, 1013.0], [25.8, 1013.0], [25.9, 1027.0], [26.0, 1027.0], [26.1, 1040.0], [26.2, 1096.0], [26.3, 1096.0], [26.4, 1102.0], [26.5, 1102.0], [26.6, 1105.0], [26.7, 1105.0], [26.8, 1105.0], [26.9, 1159.0], [27.0, 1159.0], [27.1, 1181.0], [27.2, 1198.0], [27.3, 1198.0], [27.4, 1340.0], [27.5, 1340.0], [27.6, 1362.0], [27.7, 1474.0], [27.8, 1474.0], [27.9, 1576.0], [28.0, 1576.0], [28.1, 1641.0], [28.2, 1688.0], [28.3, 1688.0], [28.4, 1736.0], [28.5, 1736.0], [28.6, 1746.0], [28.7, 1762.0], [28.8, 1762.0], [28.9, 1888.0], [29.0, 1888.0], [29.1, 1963.0], [29.2, 1987.0], [29.3, 1987.0], [29.4, 2036.0], [29.5, 2036.0], [29.6, 2051.0], [29.7, 2065.0], [29.8, 2065.0], [29.9, 2076.0], [30.0, 2076.0], [30.1, 2136.0], [30.2, 2156.0], [30.3, 2156.0], [30.4, 2351.0], [30.5, 2351.0], [30.6, 2401.0], [30.7, 2440.0], [30.8, 2440.0], [30.9, 2496.0], [31.0, 2496.0], [31.1, 2631.0], [31.2, 2770.0], [31.3, 2770.0], [31.4, 2776.0], [31.5, 2776.0], [31.6, 2806.0], [31.7, 2830.0], [31.8, 2830.0], [31.9, 2866.0], [32.0, 2866.0], [32.1, 2922.0], [32.2, 2967.0], [32.3, 2967.0], [32.4, 2970.0], [32.5, 2970.0], [32.6, 2974.0], [32.7, 2981.0], [32.8, 2981.0], [32.9, 2982.0], [33.0, 2982.0], [33.1, 2996.0], [33.2, 3012.0], [33.3, 3012.0], [33.4, 3017.0], [33.5, 3017.0], [33.6, 3161.0], [33.7, 3183.0], [33.8, 3183.0], [33.9, 3228.0], [34.0, 3228.0], [34.1, 3235.0], [34.2, 3276.0], [34.3, 3276.0], [34.4, 3288.0], [34.5, 3288.0], [34.6, 3311.0], [34.7, 3321.0], [34.8, 3321.0], [34.9, 3448.0], [35.0, 3448.0], [35.1, 3586.0], [35.2, 3588.0], [35.3, 3588.0], [35.4, 3591.0], [35.5, 3591.0], [35.6, 3625.0], [35.7, 3638.0], [35.8, 3638.0], [35.9, 3642.0], [36.0, 3642.0], [36.1, 3653.0], [36.2, 3720.0], [36.3, 3720.0], [36.4, 3762.0], [36.5, 3762.0], [36.6, 3804.0], [36.7, 3809.0], [36.8, 3809.0], [36.9, 3897.0], [37.0, 3897.0], [37.1, 3945.0], [37.2, 4001.0], [37.3, 4001.0], [37.4, 4100.0], [37.5, 4100.0], [37.6, 4107.0], [37.7, 4127.0], [37.8, 4127.0], [37.9, 4131.0], [38.0, 4131.0], [38.1, 4154.0], [38.2, 4159.0], [38.3, 4159.0], [38.4, 4172.0], [38.5, 4177.0], [38.6, 4177.0], [38.7, 4188.0], [38.8, 4188.0], [38.9, 4198.0], [39.0, 4234.0], [39.1, 4234.0], [39.2, 4305.0], [39.3, 4305.0], [39.4, 4308.0], [39.5, 4323.0], [39.6, 4323.0], [39.7, 4332.0], [39.8, 4332.0], [39.9, 4364.0], [40.0, 4369.0], [40.1, 4369.0], [40.2, 4405.0], [40.3, 4405.0], [40.4, 4417.0], [40.5, 4423.0], [40.6, 4423.0], [40.7, 4446.0], [40.8, 4446.0], [40.9, 4496.0], [41.0, 4502.0], [41.1, 4502.0], [41.2, 4516.0], [41.3, 4516.0], [41.4, 4522.0], [41.5, 4565.0], [41.6, 4565.0], [41.7, 4611.0], [41.8, 4611.0], [41.9, 4645.0], [42.0, 4727.0], [42.1, 4727.0], [42.2, 4727.0], [42.3, 4727.0], [42.4, 4763.0], [42.5, 4807.0], [42.6, 4807.0], [42.7, 4817.0], [42.8, 4817.0], [42.9, 4839.0], [43.0, 4845.0], [43.1, 4845.0], [43.2, 4864.0], [43.3, 4864.0], [43.4, 4867.0], [43.5, 4912.0], [43.6, 4912.0], [43.7, 4916.0], [43.8, 4916.0], [43.9, 4919.0], [44.0, 4959.0], [44.1, 4959.0], [44.2, 4968.0], [44.3, 4968.0], [44.4, 4980.0], [44.5, 5027.0], [44.6, 5027.0], [44.7, 5054.0], [44.8, 5054.0], [44.9, 5062.0], [45.0, 5097.0], [45.1, 5097.0], [45.2, 5107.0], [45.3, 5107.0], [45.4, 5163.0], [45.5, 5173.0], [45.6, 5173.0], [45.7, 5210.0], [45.8, 5210.0], [45.9, 5216.0], [46.0, 5229.0], [46.1, 5229.0], [46.2, 5248.0], [46.3, 5248.0], [46.4, 5269.0], [46.5, 5298.0], [46.6, 5298.0], [46.7, 5300.0], [46.8, 5300.0], [46.9, 5326.0], [47.0, 5341.0], [47.1, 5341.0], [47.2, 5392.0], [47.3, 5392.0], [47.4, 5403.0], [47.5, 5412.0], [47.6, 5412.0], [47.7, 5417.0], [47.8, 5417.0], [47.9, 5492.0], [48.0, 5499.0], [48.1, 5499.0], [48.2, 5509.0], [48.3, 5509.0], [48.4, 5509.0], [48.5, 5542.0], [48.6, 5542.0], [48.7, 5542.0], [48.8, 5542.0], [48.9, 5547.0], [49.0, 5575.0], [49.1, 5575.0], [49.2, 5629.0], [49.3, 5629.0], [49.4, 5684.0], [49.5, 5694.0], [49.6, 5694.0], [49.7, 5706.0], [49.8, 5706.0], [49.9, 5708.0], [50.0, 5744.0], [50.1, 5744.0], [50.2, 5772.0], [50.3, 5772.0], [50.4, 5813.0], [50.5, 5815.0], [50.6, 5815.0], [50.7, 5853.0], [50.8, 5853.0], [50.9, 5932.0], [51.0, 6045.0], [51.1, 6045.0], [51.2, 6052.0], [51.3, 6052.0], [51.4, 6077.0], [51.5, 6094.0], [51.6, 6094.0], [51.7, 6095.0], [51.8, 6095.0], [51.9, 6098.0], [52.0, 6114.0], [52.1, 6114.0], [52.2, 6115.0], [52.3, 6115.0], [52.4, 6132.0], [52.5, 6162.0], [52.6, 6162.0], [52.7, 6194.0], [52.8, 6194.0], [52.9, 6200.0], [53.0, 6215.0], [53.1, 6215.0], [53.2, 6236.0], [53.3, 6236.0], [53.4, 6236.0], [53.5, 6245.0], [53.6, 6245.0], [53.7, 6248.0], [53.8, 6248.0], [53.9, 6256.0], [54.0, 6271.0], [54.1, 6271.0], [54.2, 6297.0], [54.3, 6297.0], [54.4, 6302.0], [54.5, 6309.0], [54.6, 6309.0], [54.7, 6313.0], [54.8, 6313.0], [54.9, 6346.0], [55.0, 6377.0], [55.1, 6377.0], [55.2, 6401.0], [55.3, 6401.0], [55.4, 6401.0], [55.5, 6407.0], [55.6, 6407.0], [55.7, 6424.0], [55.8, 6424.0], [55.9, 6433.0], [56.0, 6456.0], [56.1, 6456.0], [56.2, 6457.0], [56.3, 6457.0], [56.4, 6461.0], [56.5, 6471.0], [56.6, 6471.0], [56.7, 6482.0], [56.8, 6482.0], [56.9, 6532.0], [57.0, 6544.0], [57.1, 6544.0], [57.2, 6552.0], [57.3, 6552.0], [57.4, 6567.0], [57.5, 6572.0], [57.6, 6572.0], [57.7, 6588.0], [57.8, 6588.0], [57.9, 6599.0], [58.0, 6603.0], [58.1, 6603.0], [58.2, 6607.0], [58.3, 6607.0], [58.4, 6607.0], [58.5, 6608.0], [58.6, 6608.0], [58.7, 6613.0], [58.8, 6613.0], [58.9, 6624.0], [59.0, 6639.0], [59.1, 6639.0], [59.2, 6650.0], [59.3, 6650.0], [59.4, 6666.0], [59.5, 6669.0], [59.6, 6669.0], [59.7, 6677.0], [59.8, 6677.0], [59.9, 6681.0], [60.0, 6694.0], [60.1, 6694.0], [60.2, 6695.0], [60.3, 6695.0], [60.4, 6720.0], [60.5, 6721.0], [60.6, 6721.0], [60.7, 6723.0], [60.8, 6723.0], [60.9, 6733.0], [61.0, 6733.0], [61.1, 6733.0], [61.2, 6736.0], [61.3, 6736.0], [61.4, 6743.0], [61.5, 6762.0], [61.6, 6762.0], [61.7, 6772.0], [61.8, 6772.0], [61.9, 6776.0], [62.0, 6785.0], [62.1, 6785.0], [62.2, 6794.0], [62.3, 6794.0], [62.4, 6810.0], [62.5, 6811.0], [62.6, 6811.0], [62.7, 6818.0], [62.8, 6818.0], [62.9, 6859.0], [63.0, 6872.0], [63.1, 6872.0], [63.2, 6874.0], [63.3, 6874.0], [63.4, 6886.0], [63.5, 6903.0], [63.6, 6903.0], [63.7, 6914.0], [63.8, 6914.0], [63.9, 6947.0], [64.0, 6960.0], [64.1, 6960.0], [64.2, 6967.0], [64.3, 6967.0], [64.4, 6979.0], [64.5, 6980.0], [64.6, 6980.0], [64.7, 6983.0], [64.8, 6983.0], [64.9, 6986.0], [65.0, 6986.0], [65.1, 6986.0], [65.2, 6990.0], [65.3, 6990.0], [65.4, 6993.0], [65.5, 6995.0], [65.6, 6995.0], [65.7, 7033.0], [65.8, 7033.0], [65.9, 7033.0], [66.0, 7036.0], [66.1, 7036.0], [66.2, 7039.0], [66.3, 7039.0], [66.4, 7041.0], [66.5, 7042.0], [66.6, 7042.0], [66.7, 7044.0], [66.8, 7044.0], [66.9, 7048.0], [67.0, 7057.0], [67.1, 7057.0], [67.2, 7065.0], [67.3, 7065.0], [67.4, 7065.0], [67.5, 7066.0], [67.6, 7066.0], [67.7, 7087.0], [67.8, 7087.0], [67.9, 7093.0], [68.0, 7098.0], [68.1, 7098.0], [68.2, 7105.0], [68.3, 7105.0], [68.4, 7107.0], [68.5, 7109.0], [68.6, 7109.0], [68.7, 7123.0], [68.8, 7123.0], [68.9, 7124.0], [69.0, 7130.0], [69.1, 7130.0], [69.2, 7131.0], [69.3, 7131.0], [69.4, 7134.0], [69.5, 7159.0], [69.6, 7159.0], [69.7, 7169.0], [69.8, 7169.0], [69.9, 7169.0], [70.0, 7222.0], [70.1, 7222.0], [70.2, 7233.0], [70.3, 7233.0], [70.4, 7239.0], [70.5, 7244.0], [70.6, 7244.0], [70.7, 7270.0], [70.8, 7270.0], [70.9, 7279.0], [71.0, 7292.0], [71.1, 7292.0], [71.2, 7301.0], [71.3, 7301.0], [71.4, 7306.0], [71.5, 7307.0], [71.6, 7307.0], [71.7, 7309.0], [71.8, 7309.0], [71.9, 7324.0], [72.0, 7343.0], [72.1, 7343.0], [72.2, 7351.0], [72.3, 7351.0], [72.4, 7353.0], [72.5, 7356.0], [72.6, 7356.0], [72.7, 7356.0], [72.8, 7356.0], [72.9, 7364.0], [73.0, 7368.0], [73.1, 7368.0], [73.2, 7369.0], [73.3, 7369.0], [73.4, 7404.0], [73.5, 7426.0], [73.6, 7426.0], [73.7, 7427.0], [73.8, 7427.0], [73.9, 7438.0], [74.0, 7464.0], [74.1, 7464.0], [74.2, 7469.0], [74.3, 7469.0], [74.4, 7474.0], [74.5, 7484.0], [74.6, 7484.0], [74.7, 7487.0], [74.8, 7487.0], [74.9, 7490.0], [75.0, 7497.0], [75.1, 7497.0], [75.2, 7500.0], [75.3, 7500.0], [75.4, 7507.0], [75.5, 7523.0], [75.6, 7523.0], [75.7, 7546.0], [75.8, 7546.0], [75.9, 7569.0], [76.0, 7577.0], [76.1, 7577.0], [76.2, 7582.0], [76.3, 7582.0], [76.4, 7598.0], [76.5, 7601.0], [76.6, 7601.0], [76.7, 7603.0], [76.8, 7603.0], [76.9, 7606.0], [77.0, 7617.0], [77.1, 7617.0], [77.2, 7623.0], [77.3, 7623.0], [77.4, 7633.0], [77.5, 7645.0], [77.6, 7645.0], [77.7, 7651.0], [77.8, 7651.0], [77.9, 7676.0], [78.0, 7676.0], [78.1, 7688.0], [78.2, 7716.0], [78.3, 7716.0], [78.4, 7731.0], [78.5, 7731.0], [78.6, 7734.0], [78.7, 7742.0], [78.8, 7742.0], [78.9, 7759.0], [79.0, 7759.0], [79.1, 7772.0], [79.2, 7775.0], [79.3, 7775.0], [79.4, 7789.0], [79.5, 7789.0], [79.6, 7794.0], [79.7, 7812.0], [79.8, 7812.0], [79.9, 7830.0], [80.0, 7830.0], [80.1, 7837.0], [80.2, 7840.0], [80.3, 7840.0], [80.4, 7846.0], [80.5, 7846.0], [80.6, 7854.0], [80.7, 7858.0], [80.8, 7858.0], [80.9, 7860.0], [81.0, 7860.0], [81.1, 7891.0], [81.2, 7908.0], [81.3, 7908.0], [81.4, 7912.0], [81.5, 7912.0], [81.6, 7917.0], [81.7, 7917.0], [81.8, 7917.0], [81.9, 7917.0], [82.0, 7917.0], [82.1, 7920.0], [82.2, 7927.0], [82.3, 7927.0], [82.4, 8005.0], [82.5, 8005.0], [82.6, 8036.0], [82.7, 8068.0], [82.8, 8068.0], [82.9, 8110.0], [83.0, 8110.0], [83.1, 8128.0], [83.2, 8162.0], [83.3, 8162.0], [83.4, 8208.0], [83.5, 8208.0], [83.6, 8216.0], [83.7, 8245.0], [83.8, 8245.0], [83.9, 8253.0], [84.0, 8253.0], [84.1, 8268.0], [84.2, 8281.0], [84.3, 8281.0], [84.4, 8292.0], [84.5, 8292.0], [84.6, 8404.0], [84.7, 8454.0], [84.8, 8454.0], [84.9, 8482.0], [85.0, 8482.0], [85.1, 8525.0], [85.2, 8555.0], [85.3, 8555.0], [85.4, 8558.0], [85.5, 8558.0], [85.6, 8568.0], [85.7, 8688.0], [85.8, 8688.0], [85.9, 8691.0], [86.0, 8691.0], [86.1, 8717.0], [86.2, 8764.0], [86.3, 8764.0], [86.4, 8797.0], [86.5, 8797.0], [86.6, 8836.0], [86.7, 8836.0], [86.8, 8836.0], [86.9, 8856.0], [87.0, 8856.0], [87.1, 8892.0], [87.2, 8973.0], [87.3, 8973.0], [87.4, 8982.0], [87.5, 8982.0], [87.6, 9027.0], [87.7, 9089.0], [87.8, 9089.0], [87.9, 9154.0], [88.0, 9154.0], [88.1, 9183.0], [88.2, 9187.0], [88.3, 9187.0], [88.4, 9242.0], [88.5, 9242.0], [88.6, 9243.0], [88.7, 9260.0], [88.8, 9260.0], [88.9, 9487.0], [89.0, 9487.0], [89.1, 9529.0], [89.2, 9582.0], [89.3, 9582.0], [89.4, 9849.0], [89.5, 9849.0], [89.6, 10071.0], [89.7, 10089.0], [89.8, 10089.0], [89.9, 10105.0], [90.0, 10105.0], [90.1, 10212.0], [90.2, 10229.0], [90.3, 10229.0], [90.4, 10315.0], [90.5, 10315.0], [90.6, 10413.0], [90.7, 10426.0], [90.8, 10426.0], [90.9, 10482.0], [91.0, 10482.0], [91.1, 10497.0], [91.2, 10584.0], [91.3, 10584.0], [91.4, 10599.0], [91.5, 10599.0], [91.6, 10715.0], [91.7, 10846.0], [91.8, 10846.0], [91.9, 10848.0], [92.0, 10848.0], [92.1, 10861.0], [92.2, 10893.0], [92.3, 10893.0], [92.4, 10959.0], [92.5, 10959.0], [92.6, 10968.0], [92.7, 11028.0], [92.8, 11028.0], [92.9, 11076.0], [93.0, 11076.0], [93.1, 11079.0], [93.2, 11248.0], [93.3, 11248.0], [93.4, 11322.0], [93.5, 11322.0], [93.6, 11369.0], [93.7, 11440.0], [93.8, 11440.0], [93.9, 11540.0], [94.0, 11540.0], [94.1, 11620.0], [94.2, 11626.0], [94.3, 11626.0], [94.4, 11634.0], [94.5, 11634.0], [94.6, 11682.0], [94.7, 11700.0], [94.8, 11700.0], [94.9, 11754.0], [95.0, 11754.0], [95.1, 11781.0], [95.2, 11857.0], [95.3, 11857.0], [95.4, 11872.0], [95.5, 11872.0], [95.6, 11884.0], [95.7, 11904.0], [95.8, 11904.0], [95.9, 11918.0], [96.0, 11918.0], [96.1, 11946.0], [96.2, 11955.0], [96.3, 11955.0], [96.4, 11959.0], [96.5, 11959.0], [96.6, 11985.0], [96.7, 12097.0], [96.8, 12097.0], [96.9, 12113.0], [97.0, 12113.0], [97.1, 12139.0], [97.2, 12145.0], [97.3, 12145.0], [97.4, 12164.0], [97.5, 12164.0], [97.6, 12202.0], [97.7, 12226.0], [97.8, 12226.0], [97.9, 12241.0], [98.0, 12241.0], [98.1, 12251.0], [98.2, 12286.0], [98.3, 12286.0], [98.4, 12396.0], [98.5, 12396.0], [98.6, 12686.0], [98.7, 12698.0], [98.8, 12698.0], [98.9, 12711.0], [99.0, 12711.0], [99.1, 12817.0], [99.2, 13069.0], [99.3, 13069.0], [99.4, 13091.0], [99.5, 13091.0], [99.6, 13465.0], [99.7, 13625.0], [99.8, 13625.0], [99.9, 13918.0], [100.0, 13918.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 64.0], [0.1, 64.0], [0.2, 64.0], [0.3, 64.0], [0.4, 65.0], [0.5, 66.0], [0.6, 66.0], [0.7, 66.0], [0.8, 66.0], [0.9, 66.0], [1.0, 66.0], [1.1, 66.0], [1.2, 66.0], [1.3, 66.0], [1.4, 67.0], [1.5, 67.0], [1.6, 67.0], [1.7, 67.0], [1.8, 67.0], [1.9, 67.0], [2.0, 67.0], [2.1, 67.0], [2.2, 67.0], [2.3, 67.0], [2.4, 67.0], [2.5, 67.0], [2.6, 67.0], [2.7, 67.0], [2.8, 67.0], [2.9, 67.0], [3.0, 67.0], [3.1, 67.0], [3.2, 67.0], [3.3, 67.0], [3.4, 68.0], [3.5, 68.0], [3.6, 68.0], [3.7, 68.0], [3.8, 68.0], [3.9, 68.0], [4.0, 68.0], [4.1, 68.0], [4.2, 68.0], [4.3, 68.0], [4.4, 68.0], [4.5, 68.0], [4.6, 68.0], [4.7, 68.0], [4.8, 68.0], [4.9, 68.0], [5.0, 68.0], [5.1, 68.0], [5.2, 68.0], [5.3, 68.0], [5.4, 68.0], [5.5, 68.0], [5.6, 68.0], [5.7, 69.0], [5.8, 69.0], [5.9, 69.0], [6.0, 69.0], [6.1, 69.0], [6.2, 69.0], [6.3, 69.0], [6.4, 69.0], [6.5, 69.0], [6.6, 69.0], [6.7, 69.0], [6.8, 69.0], [6.9, 69.0], [7.0, 69.0], [7.1, 69.0], [7.2, 69.0], [7.3, 69.0], [7.4, 69.0], [7.5, 69.0], [7.6, 69.0], [7.7, 69.0], [7.8, 69.0], [7.9, 69.0], [8.0, 69.0], [8.1, 69.0], [8.2, 69.0], [8.3, 69.0], [8.4, 70.0], [8.5, 70.0], [8.6, 70.0], [8.7, 70.0], [8.8, 70.0], [8.9, 70.0], [9.0, 70.0], [9.1, 70.0], [9.2, 70.0], [9.3, 70.0], [9.4, 70.0], [9.5, 70.0], [9.6, 70.0], [9.7, 70.0], [9.8, 70.0], [9.9, 70.0], [10.0, 70.0], [10.1, 70.0], [10.2, 70.0], [10.3, 70.0], [10.4, 70.0], [10.5, 70.0], [10.6, 70.0], [10.7, 70.0], [10.8, 70.0], [10.9, 70.0], [11.0, 71.0], [11.1, 71.0], [11.2, 71.0], [11.3, 71.0], [11.4, 71.0], [11.5, 71.0], [11.6, 71.0], [11.7, 71.0], [11.8, 71.0], [11.9, 71.0], [12.0, 71.0], [12.1, 71.0], [12.2, 71.0], [12.3, 71.0], [12.4, 71.0], [12.5, 71.0], [12.6, 71.0], [12.7, 71.0], [12.8, 71.0], [12.9, 71.0], [13.0, 71.0], [13.1, 71.0], [13.2, 71.0], [13.3, 71.0], [13.4, 71.0], [13.5, 71.0], [13.6, 71.0], [13.7, 71.0], [13.8, 71.0], [13.9, 71.0], [14.0, 71.0], [14.1, 71.0], [14.2, 71.0], [14.3, 71.0], [14.4, 71.0], [14.5, 72.0], [14.6, 72.0], [14.7, 72.0], [14.8, 72.0], [14.9, 72.0], [15.0, 72.0], [15.1, 72.0], [15.2, 72.0], [15.3, 72.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 72.0], [15.8, 72.0], [15.9, 72.0], [16.0, 72.0], [16.1, 72.0], [16.2, 72.0], [16.3, 72.0], [16.4, 72.0], [16.5, 72.0], [16.6, 72.0], [16.7, 72.0], [16.8, 72.0], [16.9, 72.0], [17.0, 72.0], [17.1, 72.0], [17.2, 72.0], [17.3, 72.0], [17.4, 72.0], [17.5, 72.0], [17.6, 72.0], [17.7, 72.0], [17.8, 72.0], [17.9, 73.0], [18.0, 73.0], [18.1, 73.0], [18.2, 73.0], [18.3, 73.0], [18.4, 73.0], [18.5, 73.0], [18.6, 73.0], [18.7, 73.0], [18.8, 73.0], [18.9, 73.0], [19.0, 73.0], [19.1, 73.0], [19.2, 73.0], [19.3, 73.0], [19.4, 73.0], [19.5, 73.0], [19.6, 73.0], [19.7, 73.0], [19.8, 73.0], [19.9, 73.0], [20.0, 73.0], [20.1, 73.0], [20.2, 73.0], [20.3, 73.0], [20.4, 74.0], [20.5, 74.0], [20.6, 74.0], [20.7, 74.0], [20.8, 74.0], [20.9, 74.0], [21.0, 74.0], [21.1, 74.0], [21.2, 74.0], [21.3, 74.0], [21.4, 74.0], [21.5, 74.0], [21.6, 74.0], [21.7, 74.0], [21.8, 74.0], [21.9, 74.0], [22.0, 74.0], [22.1, 74.0], [22.2, 74.0], [22.3, 74.0], [22.4, 74.0], [22.5, 74.0], [22.6, 74.0], [22.7, 75.0], [22.8, 75.0], [22.9, 75.0], [23.0, 75.0], [23.1, 75.0], [23.2, 75.0], [23.3, 75.0], [23.4, 75.0], [23.5, 75.0], [23.6, 75.0], [23.7, 75.0], [23.8, 75.0], [23.9, 75.0], [24.0, 75.0], [24.1, 75.0], [24.2, 75.0], [24.3, 75.0], [24.4, 75.0], [24.5, 75.0], [24.6, 75.0], [24.7, 75.0], [24.8, 75.0], [24.9, 76.0], [25.0, 76.0], [25.1, 76.0], [25.2, 76.0], [25.3, 76.0], [25.4, 76.0], [25.5, 76.0], [25.6, 76.0], [25.7, 76.0], [25.8, 76.0], [25.9, 76.0], [26.0, 76.0], [26.1, 76.0], [26.2, 76.0], [26.3, 76.0], [26.4, 76.0], [26.5, 76.0], [26.6, 76.0], [26.7, 76.0], [26.8, 76.0], [26.9, 76.0], [27.0, 76.0], [27.1, 76.0], [27.2, 76.0], [27.3, 76.0], [27.4, 76.0], [27.5, 76.0], [27.6, 76.0], [27.7, 77.0], [27.8, 77.0], [27.9, 77.0], [28.0, 77.0], [28.1, 77.0], [28.2, 77.0], [28.3, 77.0], [28.4, 77.0], [28.5, 77.0], [28.6, 77.0], [28.7, 77.0], [28.8, 77.0], [28.9, 77.0], [29.0, 78.0], [29.1, 78.0], [29.2, 78.0], [29.3, 78.0], [29.4, 78.0], [29.5, 78.0], [29.6, 78.0], [29.7, 78.0], [29.8, 78.0], [29.9, 78.0], [30.0, 78.0], [30.1, 78.0], [30.2, 78.0], [30.3, 78.0], [30.4, 78.0], [30.5, 78.0], [30.6, 78.0], [30.7, 79.0], [30.8, 79.0], [30.9, 79.0], [31.0, 79.0], [31.1, 79.0], [31.2, 79.0], [31.3, 79.0], [31.4, 79.0], [31.5, 79.0], [31.6, 79.0], [31.7, 79.0], [31.8, 79.0], [31.9, 79.0], [32.0, 79.0], [32.1, 79.0], [32.2, 79.0], [32.3, 79.0], [32.4, 79.0], [32.5, 79.0], [32.6, 79.0], [32.7, 80.0], [32.8, 80.0], [32.9, 80.0], [33.0, 80.0], [33.1, 80.0], [33.2, 80.0], [33.3, 80.0], [33.4, 80.0], [33.5, 80.0], [33.6, 80.0], [33.7, 80.0], [33.8, 80.0], [33.9, 80.0], [34.0, 80.0], [34.1, 80.0], [34.2, 81.0], [34.3, 81.0], [34.4, 81.0], [34.5, 81.0], [34.6, 81.0], [34.7, 81.0], [34.8, 81.0], [34.9, 81.0], [35.0, 81.0], [35.1, 81.0], [35.2, 81.0], [35.3, 81.0], [35.4, 81.0], [35.5, 81.0], [35.6, 81.0], [35.7, 81.0], [35.8, 81.0], [35.9, 81.0], [36.0, 81.0], [36.1, 81.0], [36.2, 82.0], [36.3, 82.0], [36.4, 82.0], [36.5, 82.0], [36.6, 82.0], [36.7, 82.0], [36.8, 82.0], [36.9, 82.0], [37.0, 82.0], [37.1, 82.0], [37.2, 83.0], [37.3, 83.0], [37.4, 83.0], [37.5, 83.0], [37.6, 83.0], [37.7, 83.0], [37.8, 83.0], [37.9, 83.0], [38.0, 83.0], [38.1, 83.0], [38.2, 83.0], [38.3, 83.0], [38.4, 83.0], [38.5, 83.0], [38.6, 83.0], [38.7, 83.0], [38.8, 83.0], [38.9, 84.0], [39.0, 84.0], [39.1, 84.0], [39.2, 84.0], [39.3, 84.0], [39.4, 84.0], [39.5, 84.0], [39.6, 84.0], [39.7, 84.0], [39.8, 84.0], [39.9, 84.0], [40.0, 84.0], [40.1, 84.0], [40.2, 84.0], [40.3, 84.0], [40.4, 84.0], [40.5, 84.0], [40.6, 84.0], [40.7, 84.0], [40.8, 84.0], [40.9, 85.0], [41.0, 85.0], [41.1, 85.0], [41.2, 85.0], [41.3, 85.0], [41.4, 85.0], [41.5, 85.0], [41.6, 85.0], [41.7, 85.0], [41.8, 85.0], [41.9, 85.0], [42.0, 85.0], [42.1, 85.0], [42.2, 85.0], [42.3, 85.0], [42.4, 85.0], [42.5, 85.0], [42.6, 85.0], [42.7, 86.0], [42.8, 86.0], [42.9, 86.0], [43.0, 86.0], [43.1, 86.0], [43.2, 86.0], [43.3, 86.0], [43.4, 86.0], [43.5, 86.0], [43.6, 86.0], [43.7, 86.0], [43.8, 86.0], [43.9, 86.0], [44.0, 86.0], [44.1, 86.0], [44.2, 86.0], [44.3, 86.0], [44.4, 86.0], [44.5, 87.0], [44.6, 87.0], [44.7, 87.0], [44.8, 87.0], [44.9, 87.0], [45.0, 87.0], [45.1, 87.0], [45.2, 87.0], [45.3, 87.0], [45.4, 87.0], [45.5, 87.0], [45.6, 87.0], [45.7, 87.0], [45.8, 87.0], [45.9, 87.0], [46.0, 88.0], [46.1, 88.0], [46.2, 88.0], [46.3, 88.0], [46.4, 88.0], [46.5, 88.0], [46.6, 88.0], [46.7, 88.0], [46.8, 88.0], [46.9, 88.0], [47.0, 88.0], [47.1, 88.0], [47.2, 88.0], [47.3, 88.0], [47.4, 88.0], [47.5, 88.0], [47.6, 88.0], [47.7, 88.0], [47.8, 88.0], [47.9, 88.0], [48.0, 88.0], [48.1, 88.0], [48.2, 88.0], [48.3, 88.0], [48.4, 88.0], [48.5, 88.0], [48.6, 88.0], [48.7, 89.0], [48.8, 89.0], [48.9, 89.0], [49.0, 89.0], [49.1, 89.0], [49.2, 89.0], [49.3, 89.0], [49.4, 89.0], [49.5, 89.0], [49.6, 89.0], [49.7, 89.0], [49.8, 89.0], [49.9, 89.0], [50.0, 90.0], [50.1, 90.0], [50.2, 90.0], [50.3, 90.0], [50.4, 90.0], [50.5, 90.0], [50.6, 90.0], [50.7, 90.0], [50.8, 90.0], [50.9, 91.0], [51.0, 91.0], [51.1, 91.0], [51.2, 91.0], [51.3, 91.0], [51.4, 91.0], [51.5, 91.0], [51.6, 91.0], [51.7, 91.0], [51.8, 91.0], [51.9, 91.0], [52.0, 91.0], [52.1, 91.0], [52.2, 91.0], [52.3, 91.0], [52.4, 91.0], [52.5, 91.0], [52.6, 91.0], [52.7, 91.0], [52.8, 91.0], [52.9, 91.0], [53.0, 92.0], [53.1, 92.0], [53.2, 92.0], [53.3, 92.0], [53.4, 92.0], [53.5, 92.0], [53.6, 92.0], [53.7, 92.0], [53.8, 92.0], [53.9, 92.0], [54.0, 93.0], [54.1, 93.0], [54.2, 93.0], [54.3, 93.0], [54.4, 93.0], [54.5, 93.0], [54.6, 93.0], [54.7, 93.0], [54.8, 93.0], [54.9, 93.0], [55.0, 93.0], [55.1, 93.0], [55.2, 93.0], [55.3, 93.0], [55.4, 93.0], [55.5, 93.0], [55.6, 93.0], [55.7, 94.0], [55.8, 94.0], [55.9, 94.0], [56.0, 94.0], [56.1, 94.0], [56.2, 94.0], [56.3, 94.0], [56.4, 95.0], [56.5, 96.0], [56.6, 96.0], [56.7, 96.0], [56.8, 96.0], [56.9, 97.0], [57.0, 97.0], [57.1, 97.0], [57.2, 97.0], [57.3, 97.0], [57.4, 97.0], [57.5, 97.0], [57.6, 97.0], [57.7, 98.0], [57.8, 98.0], [57.9, 98.0], [58.0, 98.0], [58.1, 98.0], [58.2, 98.0], [58.3, 98.0], [58.4, 98.0], [58.5, 98.0], [58.6, 98.0], [58.7, 98.0], [58.8, 98.0], [58.9, 99.0], [59.0, 100.0], [59.1, 100.0], [59.2, 100.0], [59.3, 100.0], [59.4, 100.0], [59.5, 100.0], [59.6, 100.0], [59.7, 101.0], [59.8, 101.0], [59.9, 102.0], [60.0, 102.0], [60.1, 102.0], [60.2, 102.0], [60.3, 102.0], [60.4, 103.0], [60.5, 103.0], [60.6, 103.0], [60.7, 103.0], [60.8, 103.0], [60.9, 103.0], [61.0, 104.0], [61.1, 104.0], [61.2, 104.0], [61.3, 104.0], [61.4, 104.0], [61.5, 104.0], [61.6, 104.0], [61.7, 105.0], [61.8, 105.0], [61.9, 105.0], [62.0, 105.0], [62.1, 105.0], [62.2, 105.0], [62.3, 105.0], [62.4, 106.0], [62.5, 106.0], [62.6, 106.0], [62.7, 106.0], [62.8, 106.0], [62.9, 106.0], [63.0, 108.0], [63.1, 108.0], [63.2, 108.0], [63.3, 108.0], [63.4, 108.0], [63.5, 109.0], [63.6, 109.0], [63.7, 109.0], [63.8, 109.0], [63.9, 113.0], [64.0, 114.0], [64.1, 114.0], [64.2, 115.0], [64.3, 115.0], [64.4, 117.0], [64.5, 117.0], [64.6, 117.0], [64.7, 117.0], [64.8, 117.0], [64.9, 117.0], [65.0, 121.0], [65.1, 121.0], [65.2, 126.0], [65.3, 126.0], [65.4, 126.0], [65.5, 127.0], [65.6, 127.0], [65.7, 128.0], [65.8, 128.0], [65.9, 128.0], [66.0, 129.0], [66.1, 129.0], [66.2, 129.0], [66.3, 129.0], [66.4, 129.0], [66.5, 130.0], [66.6, 130.0], [66.7, 130.0], [66.8, 130.0], [66.9, 131.0], [67.0, 131.0], [67.1, 131.0], [67.2, 131.0], [67.3, 131.0], [67.4, 132.0], [67.5, 132.0], [67.6, 132.0], [67.7, 132.0], [67.8, 132.0], [67.9, 133.0], [68.0, 133.0], [68.1, 133.0], [68.2, 133.0], [68.3, 133.0], [68.4, 134.0], [68.5, 134.0], [68.6, 134.0], [68.7, 135.0], [68.8, 135.0], [68.9, 135.0], [69.0, 135.0], [69.1, 135.0], [69.2, 136.0], [69.3, 136.0], [69.4, 136.0], [69.5, 136.0], [69.6, 136.0], [69.7, 138.0], [69.8, 138.0], [69.9, 138.0], [70.0, 138.0], [70.1, 138.0], [70.2, 140.0], [70.3, 140.0], [70.4, 140.0], [70.5, 140.0], [70.6, 140.0], [70.7, 140.0], [70.8, 140.0], [70.9, 140.0], [71.0, 140.0], [71.1, 140.0], [71.2, 141.0], [71.3, 141.0], [71.4, 141.0], [71.5, 141.0], [71.6, 141.0], [71.7, 141.0], [71.8, 141.0], [71.9, 141.0], [72.0, 141.0], [72.1, 141.0], [72.2, 141.0], [72.3, 141.0], [72.4, 142.0], [72.5, 142.0], [72.6, 142.0], [72.7, 142.0], [72.8, 142.0], [72.9, 142.0], [73.0, 143.0], [73.1, 143.0], [73.2, 144.0], [73.3, 144.0], [73.4, 145.0], [73.5, 145.0], [73.6, 145.0], [73.7, 145.0], [73.8, 145.0], [73.9, 146.0], [74.0, 146.0], [74.1, 146.0], [74.2, 146.0], [74.3, 146.0], [74.4, 148.0], [74.5, 150.0], [74.6, 150.0], [74.7, 151.0], [74.8, 151.0], [74.9, 152.0], [75.0, 152.0], [75.1, 153.0], [75.2, 154.0], [75.3, 154.0], [75.4, 154.0], [75.5, 154.0], [75.6, 154.0], [75.7, 155.0], [75.8, 155.0], [75.9, 157.0], [76.0, 157.0], [76.1, 157.0], [76.2, 159.0], [76.3, 159.0], [76.4, 160.0], [76.5, 160.0], [76.6, 160.0], [76.7, 161.0], [76.8, 161.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 165.0], [77.3, 165.0], [77.4, 167.0], [77.5, 167.0], [77.6, 168.0], [77.7, 170.0], [77.8, 170.0], [77.9, 170.0], [78.0, 170.0], [78.1, 171.0], [78.2, 171.0], [78.3, 171.0], [78.4, 175.0], [78.5, 175.0], [78.6, 180.0], [78.7, 184.0], [78.8, 184.0], [78.9, 184.0], [79.0, 184.0], [79.1, 184.0], [79.2, 187.0], [79.3, 187.0], [79.4, 189.0], [79.5, 189.0], [79.6, 198.0], [79.7, 199.0], [79.8, 199.0], [79.9, 199.0], [80.0, 199.0], [80.1, 199.0], [80.2, 200.0], [80.3, 200.0], [80.4, 201.0], [80.5, 201.0], [80.6, 202.0], [80.7, 208.0], [80.8, 208.0], [80.9, 208.0], [81.0, 208.0], [81.1, 209.0], [81.2, 215.0], [81.3, 215.0], [81.4, 218.0], [81.5, 218.0], [81.6, 218.0], [81.7, 220.0], [81.8, 220.0], [81.9, 223.0], [82.0, 223.0], [82.1, 224.0], [82.2, 229.0], [82.3, 229.0], [82.4, 237.0], [82.5, 237.0], [82.6, 240.0], [82.7, 241.0], [82.8, 241.0], [82.9, 241.0], [83.0, 241.0], [83.1, 242.0], [83.2, 252.0], [83.3, 252.0], [83.4, 252.0], [83.5, 252.0], [83.6, 254.0], [83.7, 255.0], [83.8, 255.0], [83.9, 257.0], [84.0, 257.0], [84.1, 258.0], [84.2, 271.0], [84.3, 271.0], [84.4, 271.0], [84.5, 271.0], [84.6, 272.0], [84.7, 272.0], [84.8, 272.0], [84.9, 272.0], [85.0, 272.0], [85.1, 273.0], [85.2, 274.0], [85.3, 274.0], [85.4, 275.0], [85.5, 275.0], [85.6, 275.0], [85.7, 276.0], [85.8, 276.0], [85.9, 276.0], [86.0, 276.0], [86.1, 276.0], [86.2, 277.0], [86.3, 277.0], [86.4, 277.0], [86.5, 277.0], [86.6, 278.0], [86.7, 283.0], [86.8, 283.0], [86.9, 284.0], [87.0, 284.0], [87.1, 285.0], [87.2, 287.0], [87.3, 287.0], [87.4, 287.0], [87.5, 287.0], [87.6, 290.0], [87.7, 292.0], [87.8, 292.0], [87.9, 293.0], [88.0, 293.0], [88.1, 293.0], [88.2, 294.0], [88.3, 294.0], [88.4, 294.0], [88.5, 294.0], [88.6, 294.0], [88.7, 294.0], [88.8, 294.0], [88.9, 300.0], [89.0, 300.0], [89.1, 301.0], [89.2, 301.0], [89.3, 301.0], [89.4, 302.0], [89.5, 302.0], [89.6, 306.0], [89.7, 307.0], [89.8, 307.0], [89.9, 308.0], [90.0, 308.0], [90.1, 311.0], [90.2, 324.0], [90.3, 324.0], [90.4, 328.0], [90.5, 328.0], [90.6, 333.0], [90.7, 334.0], [90.8, 334.0], [90.9, 347.0], [91.0, 347.0], [91.1, 347.0], [91.2, 351.0], [91.3, 351.0], [91.4, 357.0], [91.5, 357.0], [91.6, 370.0], [91.7, 370.0], [91.8, 370.0], [91.9, 379.0], [92.0, 379.0], [92.1, 383.0], [92.2, 388.0], [92.3, 388.0], [92.4, 412.0], [92.5, 412.0], [92.6, 423.0], [92.7, 425.0], [92.8, 425.0], [92.9, 432.0], [93.0, 432.0], [93.1, 433.0], [93.2, 474.0], [93.3, 474.0], [93.4, 474.0], [93.5, 474.0], [93.6, 516.0], [93.7, 520.0], [93.8, 520.0], [93.9, 521.0], [94.0, 521.0], [94.1, 551.0], [94.2, 557.0], [94.3, 557.0], [94.4, 558.0], [94.5, 558.0], [94.6, 560.0], [94.7, 566.0], [94.8, 566.0], [94.9, 570.0], [95.0, 570.0], [95.1, 577.0], [95.2, 583.0], [95.3, 583.0], [95.4, 592.0], [95.5, 592.0], [95.6, 596.0], [95.7, 597.0], [95.8, 597.0], [95.9, 600.0], [96.0, 600.0], [96.1, 609.0], [96.2, 614.0], [96.3, 614.0], [96.4, 618.0], [96.5, 618.0], [96.6, 620.0], [96.7, 621.0], [96.8, 621.0], [96.9, 622.0], [97.0, 622.0], [97.1, 630.0], [97.2, 704.0], [97.3, 704.0], [97.4, 717.0], [97.5, 717.0], [97.6, 719.0], [97.7, 730.0], [97.8, 730.0], [97.9, 732.0], [98.0, 732.0], [98.1, 732.0], [98.2, 745.0], [98.3, 745.0], [98.4, 845.0], [98.5, 845.0], [98.6, 845.0], [98.7, 875.0], [98.8, 875.0], [98.9, 891.0], [99.0, 891.0], [99.1, 900.0], [99.2, 1045.0], [99.3, 1045.0], [99.4, 1253.0], [99.5, 1253.0], [99.6, 1332.0], [99.7, 1589.0], [99.8, 1589.0], [99.9, 5520.0], [100.0, 5520.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 144.0], [0.3, 144.0], [0.4, 144.0], [0.5, 148.0], [0.6, 148.0], [0.7, 149.0], [0.8, 149.0], [0.9, 149.0], [1.0, 150.0], [1.1, 150.0], [1.2, 150.0], [1.3, 150.0], [1.4, 150.0], [1.5, 150.0], [1.6, 150.0], [1.7, 151.0], [1.8, 151.0], [1.9, 152.0], [2.0, 153.0], [2.1, 153.0], [2.2, 154.0], [2.3, 154.0], [2.4, 155.0], [2.5, 155.0], [2.6, 155.0], [2.7, 155.0], [2.8, 155.0], [2.9, 155.0], [3.0, 155.0], [3.1, 155.0], [3.2, 156.0], [3.3, 156.0], [3.4, 156.0], [3.5, 157.0], [3.6, 157.0], [3.7, 158.0], [3.8, 158.0], [3.9, 158.0], [4.0, 158.0], [4.1, 158.0], [4.2, 158.0], [4.3, 158.0], [4.4, 158.0], [4.5, 159.0], [4.6, 159.0], [4.7, 160.0], [4.8, 160.0], [4.9, 160.0], [5.0, 160.0], [5.1, 160.0], [5.2, 161.0], [5.3, 161.0], [5.4, 161.0], [5.5, 162.0], [5.6, 162.0], [5.7, 162.0], [5.8, 162.0], [5.9, 163.0], [6.0, 163.0], [6.1, 163.0], [6.2, 164.0], [6.3, 164.0], [6.4, 167.0], [6.5, 168.0], [6.6, 168.0], [6.7, 168.0], [6.8, 168.0], [6.9, 168.0], [7.0, 169.0], [7.1, 169.0], [7.2, 171.0], [7.3, 171.0], [7.4, 171.0], [7.5, 171.0], [7.6, 171.0], [7.7, 172.0], [7.8, 172.0], [7.9, 173.0], [8.0, 174.0], [8.1, 174.0], [8.2, 175.0], [8.3, 175.0], [8.4, 176.0], [8.5, 177.0], [8.6, 177.0], [8.7, 182.0], [8.8, 182.0], [8.9, 183.0], [9.0, 185.0], [9.1, 185.0], [9.2, 185.0], [9.3, 185.0], [9.4, 185.0], [9.5, 187.0], [9.6, 187.0], [9.7, 188.0], [9.8, 188.0], [9.9, 189.0], [10.0, 191.0], [10.1, 191.0], [10.2, 192.0], [10.3, 192.0], [10.4, 194.0], [10.5, 194.0], [10.6, 194.0], [10.7, 198.0], [10.8, 198.0], [10.9, 198.0], [11.0, 201.0], [11.1, 201.0], [11.2, 205.0], [11.3, 205.0], [11.4, 209.0], [11.5, 213.0], [11.6, 213.0], [11.7, 217.0], [11.8, 217.0], [11.9, 220.0], [12.0, 225.0], [12.1, 225.0], [12.2, 230.0], [12.3, 230.0], [12.4, 232.0], [12.5, 233.0], [12.6, 233.0], [12.7, 237.0], [12.8, 237.0], [12.9, 241.0], [13.0, 246.0], [13.1, 246.0], [13.2, 247.0], [13.3, 247.0], [13.4, 250.0], [13.5, 253.0], [13.6, 253.0], [13.7, 254.0], [13.8, 254.0], [13.9, 264.0], [14.0, 268.0], [14.1, 268.0], [14.2, 270.0], [14.3, 270.0], [14.4, 275.0], [14.5, 276.0], [14.6, 276.0], [14.7, 277.0], [14.8, 277.0], [14.9, 279.0], [15.0, 279.0], [15.1, 279.0], [15.2, 281.0], [15.3, 281.0], [15.4, 282.0], [15.5, 282.0], [15.6, 282.0], [15.7, 284.0], [15.8, 284.0], [15.9, 300.0], [16.0, 307.0], [16.1, 307.0], [16.2, 310.0], [16.3, 310.0], [16.4, 310.0], [16.5, 311.0], [16.6, 311.0], [16.7, 336.0], [16.8, 336.0], [16.9, 337.0], [17.0, 347.0], [17.1, 347.0], [17.2, 354.0], [17.3, 354.0], [17.4, 354.0], [17.5, 355.0], [17.6, 355.0], [17.7, 363.0], [17.8, 363.0], [17.9, 366.0], [18.0, 370.0], [18.1, 370.0], [18.2, 370.0], [18.3, 370.0], [18.4, 373.0], [18.5, 388.0], [18.6, 388.0], [18.7, 389.0], [18.8, 389.0], [18.9, 392.0], [19.0, 405.0], [19.1, 405.0], [19.2, 410.0], [19.3, 410.0], [19.4, 420.0], [19.5, 428.0], [19.6, 428.0], [19.7, 437.0], [19.8, 437.0], [19.9, 444.0], [20.0, 444.0], [20.1, 444.0], [20.2, 449.0], [20.3, 449.0], [20.4, 450.0], [20.5, 451.0], [20.6, 451.0], [20.7, 457.0], [20.8, 457.0], [20.9, 466.0], [21.0, 480.0], [21.1, 480.0], [21.2, 483.0], [21.3, 483.0], [21.4, 504.0], [21.5, 504.0], [21.6, 565.0], [21.7, 567.0], [21.8, 567.0], [21.9, 575.0], [22.0, 575.0], [22.1, 576.0], [22.2, 581.0], [22.3, 581.0], [22.4, 610.0], [22.5, 610.0], [22.6, 627.0], [22.7, 694.0], [22.8, 694.0], [22.9, 699.0], [23.0, 699.0], [23.1, 746.0], [23.2, 759.0], [23.3, 759.0], [23.4, 761.0], [23.5, 761.0], [23.6, 789.0], [23.7, 790.0], [23.8, 790.0], [23.9, 820.0], [24.0, 820.0], [24.1, 913.0], [24.2, 937.0], [24.3, 937.0], [24.4, 938.0], [24.5, 938.0], [24.6, 954.0], [24.7, 960.0], [24.8, 960.0], [24.9, 1013.0], [25.0, 1013.0], [25.1, 1111.0], [25.2, 1170.0], [25.3, 1170.0], [25.4, 1172.0], [25.5, 1172.0], [25.6, 1178.0], [25.7, 1180.0], [25.8, 1180.0], [25.9, 1198.0], [26.0, 1198.0], [26.1, 1234.0], [26.2, 1250.0], [26.3, 1250.0], [26.4, 1254.0], [26.5, 1254.0], [26.6, 1339.0], [26.7, 1342.0], [26.8, 1342.0], [26.9, 1356.0], [27.0, 1356.0], [27.1, 1408.0], [27.2, 1453.0], [27.3, 1453.0], [27.4, 1455.0], [27.5, 1455.0], [27.6, 1487.0], [27.7, 1570.0], [27.8, 1570.0], [27.9, 1726.0], [28.0, 1726.0], [28.1, 1826.0], [28.2, 1834.0], [28.3, 1834.0], [28.4, 1876.0], [28.5, 1876.0], [28.6, 2016.0], [28.7, 2040.0], [28.8, 2040.0], [28.9, 2055.0], [29.0, 2055.0], [29.1, 2063.0], [29.2, 2121.0], [29.3, 2121.0], [29.4, 2153.0], [29.5, 2153.0], [29.6, 2159.0], [29.7, 2251.0], [29.8, 2251.0], [29.9, 2276.0], [30.0, 2276.0], [30.1, 2284.0], [30.2, 2366.0], [30.3, 2366.0], [30.4, 2540.0], [30.5, 2540.0], [30.6, 2626.0], [30.7, 2645.0], [30.8, 2645.0], [30.9, 2702.0], [31.0, 2702.0], [31.1, 2897.0], [31.2, 2958.0], [31.3, 2958.0], [31.4, 2972.0], [31.5, 2972.0], [31.6, 2974.0], [31.7, 2988.0], [31.8, 2988.0], [31.9, 2996.0], [32.0, 2996.0], [32.1, 3045.0], [32.2, 3061.0], [32.3, 3061.0], [32.4, 3065.0], [32.5, 3065.0], [32.6, 3088.0], [32.7, 3088.0], [32.8, 3088.0], [32.9, 3134.0], [33.0, 3134.0], [33.1, 3136.0], [33.2, 3264.0], [33.3, 3264.0], [33.4, 3326.0], [33.5, 3326.0], [33.6, 3337.0], [33.7, 3362.0], [33.8, 3362.0], [33.9, 3366.0], [34.0, 3366.0], [34.1, 3381.0], [34.2, 3419.0], [34.3, 3419.0], [34.4, 3455.0], [34.5, 3455.0], [34.6, 3518.0], [34.7, 3529.0], [34.8, 3529.0], [34.9, 3710.0], [35.0, 3710.0], [35.1, 3710.0], [35.2, 3711.0], [35.3, 3711.0], [35.4, 3716.0], [35.5, 3716.0], [35.6, 3718.0], [35.7, 3736.0], [35.8, 3736.0], [35.9, 3802.0], [36.0, 3802.0], [36.1, 3812.0], [36.2, 3834.0], [36.3, 3834.0], [36.4, 3875.0], [36.5, 3875.0], [36.6, 3884.0], [36.7, 3985.0], [36.8, 3985.0], [36.9, 4038.0], [37.0, 4038.0], [37.1, 4083.0], [37.2, 4093.0], [37.3, 4093.0], [37.4, 4174.0], [37.5, 4174.0], [37.6, 4179.0], [37.7, 4222.0], [37.8, 4222.0], [37.9, 4233.0], [38.0, 4233.0], [38.1, 4263.0], [38.2, 4281.0], [38.3, 4281.0], [38.4, 4296.0], [38.5, 4303.0], [38.6, 4303.0], [38.7, 4306.0], [38.8, 4306.0], [38.9, 4324.0], [39.0, 4376.0], [39.1, 4376.0], [39.2, 4384.0], [39.3, 4384.0], [39.4, 4399.0], [39.5, 4420.0], [39.6, 4420.0], [39.7, 4479.0], [39.8, 4479.0], [39.9, 4504.0], [40.0, 4518.0], [40.1, 4518.0], [40.2, 4528.0], [40.3, 4528.0], [40.4, 4584.0], [40.5, 4584.0], [40.6, 4584.0], [40.7, 4588.0], [40.8, 4588.0], [40.9, 4590.0], [41.0, 4653.0], [41.1, 4653.0], [41.2, 4684.0], [41.3, 4684.0], [41.4, 4699.0], [41.5, 4717.0], [41.6, 4717.0], [41.7, 4732.0], [41.8, 4732.0], [41.9, 4808.0], [42.0, 4809.0], [42.1, 4809.0], [42.2, 4896.0], [42.3, 4896.0], [42.4, 4910.0], [42.5, 4926.0], [42.6, 4926.0], [42.7, 4935.0], [42.8, 4935.0], [42.9, 4956.0], [43.0, 4989.0], [43.1, 4989.0], [43.2, 5000.0], [43.3, 5000.0], [43.4, 5059.0], [43.5, 5064.0], [43.6, 5064.0], [43.7, 5133.0], [43.8, 5133.0], [43.9, 5134.0], [44.0, 5173.0], [44.1, 5173.0], [44.2, 5187.0], [44.3, 5187.0], [44.4, 5192.0], [44.5, 5196.0], [44.6, 5196.0], [44.7, 5215.0], [44.8, 5215.0], [44.9, 5256.0], [45.0, 5291.0], [45.1, 5291.0], [45.2, 5303.0], [45.3, 5303.0], [45.4, 5307.0], [45.5, 5319.0], [45.6, 5319.0], [45.7, 5338.0], [45.8, 5338.0], [45.9, 5355.0], [46.0, 5390.0], [46.1, 5390.0], [46.2, 5408.0], [46.3, 5408.0], [46.4, 5439.0], [46.5, 5458.0], [46.6, 5458.0], [46.7, 5467.0], [46.8, 5467.0], [46.9, 5485.0], [47.0, 5494.0], [47.1, 5494.0], [47.2, 5497.0], [47.3, 5497.0], [47.4, 5517.0], [47.5, 5520.0], [47.6, 5520.0], [47.7, 5565.0], [47.8, 5565.0], [47.9, 5634.0], [48.0, 5637.0], [48.1, 5637.0], [48.2, 5653.0], [48.3, 5653.0], [48.4, 5663.0], [48.5, 5688.0], [48.6, 5688.0], [48.7, 5717.0], [48.8, 5717.0], [48.9, 5771.0], [49.0, 5772.0], [49.1, 5772.0], [49.2, 5798.0], [49.3, 5798.0], [49.4, 5803.0], [49.5, 5813.0], [49.6, 5813.0], [49.7, 5840.0], [49.8, 5840.0], [49.9, 5875.0], [50.0, 5904.0], [50.1, 5904.0], [50.2, 5936.0], [50.3, 5936.0], [50.4, 5939.0], [50.5, 6009.0], [50.6, 6009.0], [50.7, 6115.0], [50.8, 6115.0], [50.9, 6159.0], [51.0, 6170.0], [51.1, 6170.0], [51.2, 6176.0], [51.3, 6176.0], [51.4, 6196.0], [51.5, 6201.0], [51.6, 6201.0], [51.7, 6240.0], [51.8, 6240.0], [51.9, 6250.0], [52.0, 6263.0], [52.1, 6263.0], [52.2, 6269.0], [52.3, 6269.0], [52.4, 6279.0], [52.5, 6285.0], [52.6, 6285.0], [52.7, 6304.0], [52.8, 6304.0], [52.9, 6305.0], [53.0, 6308.0], [53.1, 6308.0], [53.2, 6328.0], [53.3, 6328.0], [53.4, 6328.0], [53.5, 6339.0], [53.6, 6339.0], [53.7, 6355.0], [53.8, 6355.0], [53.9, 6362.0], [54.0, 6379.0], [54.1, 6379.0], [54.2, 6384.0], [54.3, 6384.0], [54.4, 6425.0], [54.5, 6444.0], [54.6, 6444.0], [54.7, 6471.0], [54.8, 6471.0], [54.9, 6475.0], [55.0, 6526.0], [55.1, 6526.0], [55.2, 6527.0], [55.3, 6527.0], [55.4, 6536.0], [55.5, 6543.0], [55.6, 6543.0], [55.7, 6553.0], [55.8, 6553.0], [55.9, 6558.0], [56.0, 6559.0], [56.1, 6559.0], [56.2, 6615.0], [56.3, 6615.0], [56.4, 6617.0], [56.5, 6619.0], [56.6, 6619.0], [56.7, 6638.0], [56.8, 6638.0], [56.9, 6655.0], [57.0, 6672.0], [57.1, 6672.0], [57.2, 6675.0], [57.3, 6675.0], [57.4, 6677.0], [57.5, 6715.0], [57.6, 6715.0], [57.7, 6716.0], [57.8, 6716.0], [57.9, 6723.0], [58.0, 6734.0], [58.1, 6734.0], [58.2, 6741.0], [58.3, 6741.0], [58.4, 6746.0], [58.5, 6751.0], [58.6, 6751.0], [58.7, 6755.0], [58.8, 6755.0], [58.9, 6774.0], [59.0, 6803.0], [59.1, 6803.0], [59.2, 6808.0], [59.3, 6808.0], [59.4, 6809.0], [59.5, 6822.0], [59.6, 6822.0], [59.7, 6827.0], [59.8, 6827.0], [59.9, 6830.0], [60.0, 6832.0], [60.1, 6832.0], [60.2, 6838.0], [60.3, 6838.0], [60.4, 6881.0], [60.5, 6882.0], [60.6, 6882.0], [60.7, 6884.0], [60.8, 6884.0], [60.9, 6885.0], [61.0, 6893.0], [61.1, 6893.0], [61.2, 6925.0], [61.3, 6925.0], [61.4, 6939.0], [61.5, 6944.0], [61.6, 6944.0], [61.7, 6948.0], [61.8, 6948.0], [61.9, 6962.0], [62.0, 6964.0], [62.1, 6964.0], [62.2, 7024.0], [62.3, 7024.0], [62.4, 7042.0], [62.5, 7049.0], [62.6, 7049.0], [62.7, 7054.0], [62.8, 7054.0], [62.9, 7071.0], [63.0, 7076.0], [63.1, 7076.0], [63.2, 7099.0], [63.3, 7099.0], [63.4, 7107.0], [63.5, 7108.0], [63.6, 7108.0], [63.7, 7109.0], [63.8, 7109.0], [63.9, 7113.0], [64.0, 7131.0], [64.1, 7131.0], [64.2, 7134.0], [64.3, 7134.0], [64.4, 7134.0], [64.5, 7137.0], [64.6, 7137.0], [64.7, 7137.0], [64.8, 7137.0], [64.9, 7157.0], [65.0, 7160.0], [65.1, 7160.0], [65.2, 7163.0], [65.3, 7163.0], [65.4, 7169.0], [65.5, 7174.0], [65.6, 7174.0], [65.7, 7183.0], [65.8, 7183.0], [65.9, 7183.0], [66.0, 7184.0], [66.1, 7184.0], [66.2, 7184.0], [66.3, 7184.0], [66.4, 7191.0], [66.5, 7201.0], [66.6, 7201.0], [66.7, 7204.0], [66.8, 7204.0], [66.9, 7216.0], [67.0, 7219.0], [67.1, 7219.0], [67.2, 7221.0], [67.3, 7221.0], [67.4, 7228.0], [67.5, 7237.0], [67.6, 7237.0], [67.7, 7240.0], [67.8, 7240.0], [67.9, 7245.0], [68.0, 7248.0], [68.1, 7248.0], [68.2, 7251.0], [68.3, 7251.0], [68.4, 7287.0], [68.5, 7293.0], [68.6, 7293.0], [68.7, 7311.0], [68.8, 7311.0], [68.9, 7328.0], [69.0, 7360.0], [69.1, 7360.0], [69.2, 7360.0], [69.3, 7360.0], [69.4, 7368.0], [69.5, 7379.0], [69.6, 7379.0], [69.7, 7384.0], [69.8, 7384.0], [69.9, 7388.0], [70.0, 7390.0], [70.1, 7390.0], [70.2, 7390.0], [70.3, 7390.0], [70.4, 7398.0], [70.5, 7416.0], [70.6, 7416.0], [70.7, 7423.0], [70.8, 7423.0], [70.9, 7432.0], [71.0, 7440.0], [71.1, 7440.0], [71.2, 7443.0], [71.3, 7443.0], [71.4, 7444.0], [71.5, 7454.0], [71.6, 7454.0], [71.7, 7477.0], [71.8, 7477.0], [71.9, 7513.0], [72.0, 7525.0], [72.1, 7525.0], [72.2, 7538.0], [72.3, 7538.0], [72.4, 7546.0], [72.5, 7553.0], [72.6, 7553.0], [72.7, 7561.0], [72.8, 7561.0], [72.9, 7568.0], [73.0, 7572.0], [73.1, 7572.0], [73.2, 7573.0], [73.3, 7573.0], [73.4, 7578.0], [73.5, 7591.0], [73.6, 7591.0], [73.7, 7609.0], [73.8, 7609.0], [73.9, 7627.0], [74.0, 7639.0], [74.1, 7639.0], [74.2, 7652.0], [74.3, 7652.0], [74.4, 7725.0], [74.5, 7729.0], [74.6, 7729.0], [74.7, 7730.0], [74.8, 7730.0], [74.9, 7740.0], [75.0, 7747.0], [75.1, 7747.0], [75.2, 7787.0], [75.3, 7787.0], [75.4, 7791.0], [75.5, 7823.0], [75.6, 7823.0], [75.7, 7823.0], [75.8, 7823.0], [75.9, 7833.0], [76.0, 7845.0], [76.1, 7845.0], [76.2, 7852.0], [76.3, 7852.0], [76.4, 7860.0], [76.5, 7867.0], [76.6, 7867.0], [76.7, 7880.0], [76.8, 7880.0], [76.9, 7887.0], [77.0, 7893.0], [77.1, 7893.0], [77.2, 7897.0], [77.3, 7897.0], [77.4, 7902.0], [77.5, 7920.0], [77.6, 7920.0], [77.7, 7930.0], [77.8, 7930.0], [77.9, 7935.0], [78.0, 7952.0], [78.1, 7952.0], [78.2, 7954.0], [78.3, 7954.0], [78.4, 7955.0], [78.5, 7956.0], [78.6, 7956.0], [78.7, 7967.0], [78.8, 7967.0], [78.9, 7972.0], [79.0, 7974.0], [79.1, 7974.0], [79.2, 7983.0], [79.3, 7983.0], [79.4, 7983.0], [79.5, 7987.0], [79.6, 7987.0], [79.7, 7991.0], [79.8, 7991.0], [79.9, 7996.0], [80.0, 8018.0], [80.1, 8018.0], [80.2, 8111.0], [80.3, 8111.0], [80.4, 8118.0], [80.5, 8121.0], [80.6, 8121.0], [80.7, 8166.0], [80.8, 8166.0], [80.9, 8188.0], [81.0, 8188.0], [81.1, 8191.0], [81.2, 8202.0], [81.3, 8202.0], [81.4, 8203.0], [81.5, 8203.0], [81.6, 8211.0], [81.7, 8232.0], [81.8, 8232.0], [81.9, 8241.0], [82.0, 8241.0], [82.1, 8255.0], [82.2, 8280.0], [82.3, 8280.0], [82.4, 8304.0], [82.5, 8304.0], [82.6, 8342.0], [82.7, 8343.0], [82.8, 8343.0], [82.9, 8347.0], [83.0, 8347.0], [83.1, 8365.0], [83.2, 8368.0], [83.3, 8368.0], [83.4, 8376.0], [83.5, 8376.0], [83.6, 8399.0], [83.7, 8416.0], [83.8, 8416.0], [83.9, 8557.0], [84.0, 8557.0], [84.1, 8645.0], [84.2, 8684.0], [84.3, 8684.0], [84.4, 8700.0], [84.5, 8700.0], [84.6, 8711.0], [84.7, 8733.0], [84.8, 8733.0], [84.9, 8738.0], [85.0, 8738.0], [85.1, 8754.0], [85.2, 8783.0], [85.3, 8783.0], [85.4, 8792.0], [85.5, 8792.0], [85.6, 8798.0], [85.7, 8839.0], [85.8, 8839.0], [85.9, 8858.0], [86.0, 8858.0], [86.1, 8886.0], [86.2, 8906.0], [86.3, 8906.0], [86.4, 8908.0], [86.5, 8908.0], [86.6, 8942.0], [86.7, 8970.0], [86.8, 8970.0], [86.9, 9051.0], [87.0, 9051.0], [87.1, 9071.0], [87.2, 9116.0], [87.3, 9116.0], [87.4, 9224.0], [87.5, 9224.0], [87.6, 9260.0], [87.7, 9295.0], [87.8, 9295.0], [87.9, 9304.0], [88.0, 9304.0], [88.1, 9314.0], [88.2, 9315.0], [88.3, 9315.0], [88.4, 9384.0], [88.5, 9384.0], [88.6, 9512.0], [88.7, 9668.0], [88.8, 9668.0], [88.9, 9769.0], [89.0, 9769.0], [89.1, 10101.0], [89.2, 10155.0], [89.3, 10155.0], [89.4, 10174.0], [89.5, 10174.0], [89.6, 10209.0], [89.7, 10315.0], [89.8, 10315.0], [89.9, 10332.0], [90.0, 10332.0], [90.1, 10483.0], [90.2, 10513.0], [90.3, 10513.0], [90.4, 10575.0], [90.5, 10575.0], [90.6, 10583.0], [90.7, 10602.0], [90.8, 10602.0], [90.9, 10657.0], [91.0, 10657.0], [91.1, 10686.0], [91.2, 10750.0], [91.3, 10750.0], [91.4, 10790.0], [91.5, 10790.0], [91.6, 10931.0], [91.7, 10970.0], [91.8, 10970.0], [91.9, 11045.0], [92.0, 11045.0], [92.1, 11047.0], [92.2, 11113.0], [92.3, 11113.0], [92.4, 11165.0], [92.5, 11165.0], [92.6, 11228.0], [92.7, 11299.0], [92.8, 11299.0], [92.9, 11335.0], [93.0, 11335.0], [93.1, 11386.0], [93.2, 11400.0], [93.3, 11400.0], [93.4, 11523.0], [93.5, 11523.0], [93.6, 11556.0], [93.7, 11611.0], [93.8, 11611.0], [93.9, 11662.0], [94.0, 11662.0], [94.1, 11708.0], [94.2, 11713.0], [94.3, 11713.0], [94.4, 11777.0], [94.5, 11777.0], [94.6, 11780.0], [94.7, 11786.0], [94.8, 11786.0], [94.9, 11910.0], [95.0, 11910.0], [95.1, 11946.0], [95.2, 11973.0], [95.3, 11973.0], [95.4, 11975.0], [95.5, 11975.0], [95.6, 11987.0], [95.7, 12004.0], [95.8, 12004.0], [95.9, 12015.0], [96.0, 12015.0], [96.1, 12041.0], [96.2, 12060.0], [96.3, 12060.0], [96.4, 12089.0], [96.5, 12089.0], [96.6, 12113.0], [96.7, 12182.0], [96.8, 12182.0], [96.9, 12198.0], [97.0, 12198.0], [97.1, 12226.0], [97.2, 12248.0], [97.3, 12248.0], [97.4, 12277.0], [97.5, 12277.0], [97.6, 12309.0], [97.7, 12313.0], [97.8, 12313.0], [97.9, 12325.0], [98.0, 12325.0], [98.1, 12330.0], [98.2, 12362.0], [98.3, 12362.0], [98.4, 12550.0], [98.5, 12550.0], [98.6, 12784.0], [98.7, 13045.0], [98.8, 13045.0], [98.9, 13248.0], [99.0, 13248.0], [99.1, 13418.0], [99.2, 13435.0], [99.3, 13435.0], [99.4, 13666.0], [99.5, 13666.0], [99.6, 13713.0], [99.7, 14341.0], [99.8, 14341.0], [99.9, 14658.0], [100.0, 14658.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 354.0, "series": [{"data": [[0.0, 66.0], [100.0, 39.0], [200.0, 19.0], [300.0, 10.0], [400.0, 7.0], [500.0, 4.0], [600.0, 4.0], [800.0, 2.0], [900.0, 3.0], [1000.0, 4.0], [1100.0, 6.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 4.0], [2100.0, 2.0], [2300.0, 1.0], [2400.0, 3.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 3.0], [2900.0, 7.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 1.0], [3500.0, 3.0], [3700.0, 2.0], [3600.0, 4.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 10.0], [4300.0, 6.0], [4200.0, 1.0], [4400.0, 5.0], [4600.0, 2.0], [4500.0, 4.0], [4800.0, 6.0], [4700.0, 3.0], [4900.0, 6.0], [5000.0, 4.0], [5100.0, 3.0], [5300.0, 4.0], [5200.0, 6.0], [5600.0, 3.0], [5400.0, 5.0], [5500.0, 6.0], [5700.0, 4.0], [5800.0, 3.0], [6000.0, 6.0], [6100.0, 5.0], [5900.0, 1.0], [6300.0, 5.0], [6200.0, 9.0], [6400.0, 10.0], [6500.0, 7.0], [6600.0, 14.0], [6700.0, 12.0], [6900.0, 13.0], [6800.0, 7.0], [7100.0, 11.0], [7000.0, 15.0], [7400.0, 11.0], [7300.0, 13.0], [7200.0, 7.0], [7600.0, 10.0], [7500.0, 8.0], [7800.0, 9.0], [7700.0, 9.0], [7900.0, 7.0], [8100.0, 3.0], [8000.0, 3.0], [8200.0, 7.0], [8600.0, 2.0], [8700.0, 3.0], [8400.0, 3.0], [8500.0, 4.0], [8900.0, 2.0], [9100.0, 3.0], [8800.0, 4.0], [9000.0, 2.0], [9200.0, 3.0], [9500.0, 2.0], [9400.0, 1.0], [10000.0, 2.0], [10100.0, 1.0], [10200.0, 2.0], [9800.0, 1.0], [10400.0, 4.0], [10500.0, 2.0], [10300.0, 1.0], [10700.0, 1.0], [10800.0, 4.0], [10900.0, 2.0], [11000.0, 3.0], [11200.0, 1.0], [11300.0, 2.0], [11500.0, 1.0], [11400.0, 1.0], [11600.0, 4.0], [11700.0, 3.0], [12100.0, 4.0], [12000.0, 1.0], [11800.0, 3.0], [12200.0, 5.0], [11900.0, 6.0], [12600.0, 2.0], [12300.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [13000.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [13900.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 354.0], [600.0, 8.0], [700.0, 7.0], [200.0, 52.0], [800.0, 4.0], [900.0, 1.0], [1000.0, 1.0], [300.0, 21.0], [1200.0, 1.0], [1300.0, 1.0], [5500.0, 1.0], [1500.0, 1.0], [100.0, 127.0], [400.0, 7.0], [500.0, 14.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[100.0, 66.0], [200.0, 29.0], [300.0, 19.0], [400.0, 14.0], [500.0, 6.0], [600.0, 4.0], [700.0, 5.0], [800.0, 1.0], [900.0, 5.0], [1000.0, 1.0], [1100.0, 6.0], [1200.0, 3.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 1.0], [1700.0, 1.0], [1800.0, 3.0], [2000.0, 4.0], [2100.0, 3.0], [2200.0, 3.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 2.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 5.0], [3000.0, 5.0], [3100.0, 2.0], [3300.0, 5.0], [3200.0, 1.0], [3400.0, 2.0], [3500.0, 2.0], [3700.0, 6.0], [3800.0, 5.0], [3900.0, 1.0], [4000.0, 3.0], [4300.0, 6.0], [4200.0, 5.0], [4100.0, 2.0], [4400.0, 2.0], [4500.0, 7.0], [4600.0, 3.0], [4700.0, 2.0], [4800.0, 3.0], [5000.0, 3.0], [4900.0, 5.0], [5100.0, 6.0], [5200.0, 3.0], [5300.0, 6.0], [5400.0, 7.0], [5500.0, 3.0], [5600.0, 5.0], [5800.0, 4.0], [5700.0, 4.0], [5900.0, 3.0], [6100.0, 5.0], [6000.0, 1.0], [6300.0, 10.0], [6200.0, 7.0], [6400.0, 4.0], [6500.0, 7.0], [6600.0, 8.0], [6700.0, 9.0], [6800.0, 13.0], [6900.0, 6.0], [7100.0, 19.0], [7000.0, 7.0], [7200.0, 13.0], [7400.0, 8.0], [7300.0, 11.0], [7600.0, 4.0], [7500.0, 11.0], [7700.0, 7.0], [7900.0, 16.0], [7800.0, 11.0], [8100.0, 6.0], [8000.0, 1.0], [8300.0, 8.0], [8200.0, 7.0], [8700.0, 8.0], [8600.0, 2.0], [8400.0, 1.0], [8500.0, 1.0], [8800.0, 3.0], [9000.0, 2.0], [9200.0, 3.0], [8900.0, 4.0], [9100.0, 1.0], [9300.0, 4.0], [9600.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [10100.0, 3.0], [10200.0, 1.0], [10300.0, 2.0], [10400.0, 1.0], [10600.0, 3.0], [10500.0, 3.0], [10700.0, 2.0], [11000.0, 2.0], [11100.0, 2.0], [11200.0, 2.0], [10900.0, 2.0], [11300.0, 2.0], [11400.0, 1.0], [11500.0, 2.0], [11600.0, 2.0], [11700.0, 5.0], [12000.0, 5.0], [12200.0, 3.0], [12100.0, 3.0], [11900.0, 5.0], [12300.0, 5.0], [12500.0, 1.0], [12700.0, 1.0], [13000.0, 1.0], [13200.0, 1.0], [13400.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [14300.0, 1.0], [14600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 60.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 837.0, "series": [{"data": [[0.0, 561.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 60.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 837.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 342.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 70.19987389659511, "minX": 1.69513386E12, "maxY": 76.41121495327104, "series": [{"data": [[1.69513392E12, 70.19987389659511], [1.69513386E12, 76.41121495327104]], "isOverall": false, "label": "ThreadPathao", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513392E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 64.0, "minX": 1.0, "maxY": 10985.0, "series": [{"data": [[2.0, 3082.0], [3.0, 4522.0], [4.0, 2996.0], [5.0, 1027.0], [6.0, 1987.0], [7.0, 1762.0], [8.0, 2967.0], [9.0, 2496.0], [10.0, 1181.0], [11.0, 2440.0], [12.0, 1736.0], [13.0, 2401.0], [14.0, 2351.0], [15.0, 2806.0], [16.0, 3588.0], [17.0, 3586.0], [18.0, 2830.0], [19.0, 3638.0], [20.0, 5326.0], [21.0, 2922.0], [22.0, 4183.5], [23.0, 3720.0], [24.0, 4159.0], [25.0, 3653.0], [26.0, 3642.0], [27.0, 3311.0], [28.0, 3900.0], [29.0, 2994.0], [30.0, 1823.0], [31.0, 5107.0], [33.0, 4496.0], [32.0, 4508.333333333333], [34.0, 2316.0], [35.0, 3897.0], [37.0, 3945.0], [36.0, 4100.0], [38.0, 3967.5], [39.0, 5021.0], [41.0, 5300.0], [40.0, 4807.0], [43.0, 4961.0], [42.0, 4963.0], [45.0, 5073.4], [44.0, 5159.5], [47.0, 5287.0], [46.0, 5028.285714285715], [48.0, 4917.0], [49.0, 3925.0], [50.0, 4155.333333333333], [51.0, 4284.2], [52.0, 4634.666666666667], [53.0, 5024.25], [55.0, 5722.833333333333], [54.0, 5910.299999999999], [57.0, 6616.0], [56.0, 6771.090909090909], [59.0, 6281.333333333333], [58.0, 6587.714285714286], [61.0, 6794.0], [60.0, 6674.444444444444], [62.0, 6909.285714285714], [63.0, 5967.25], [64.0, 7142.933333333333], [65.0, 5591.428571428572], [67.0, 6310.777777777777], [66.0, 7183.400000000001], [71.0, 6378.846153846153], [70.0, 206.0], [69.0, 7044.8], [68.0, 3344.0], [75.0, 8241.0], [74.0, 7966.874999999999], [73.0, 8185.769230769231], [72.0, 7725.565217391304], [79.0, 2719.4], [78.0, 10840.5], [77.0, 10538.333333333334], [76.0, 8828.0], [83.0, 289.0], [82.0, 3081.3333333333335], [81.0, 7384.597938144333], [80.0, 75.0], [84.0, 1758.0], [87.0, 310.0], [86.0, 100.0], [85.0, 182.0], [88.0, 1527.0], [90.0, 1945.6666666666667], [91.0, 80.5], [89.0, 143.42857142857144], [92.0, 3262.7692307692305], [95.0, 3161.0], [94.0, 197.5], [93.0, 2029.7500000000002], [96.0, 1466.857142857143], [97.0, 820.1666666666666], [99.0, 154.0], [98.0, 91.0], [100.0, 2426.2222222222217], [1.0, 806.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[70.93833333333338, 5077.438333333343]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 687.0], [3.0, 287.0], [4.0, 140.0], [5.0, 152.0], [6.0, 135.0], [7.0, 64.0], [8.0, 551.0], [9.0, 129.0], [10.0, 73.0], [11.0, 100.0], [12.0, 141.0], [13.0, 557.0], [14.0, 293.0], [15.0, 168.0], [16.0, 130.0], [17.0, 130.0], [18.0, 67.0], [19.0, 72.0], [20.0, 141.0], [21.0, 74.0], [22.0, 340.5], [23.0, 81.0], [24.0, 74.0], [25.0, 83.0], [26.0, 68.0], [27.0, 70.0], [28.0, 112.5], [29.0, 238.0], [30.0, 157.25], [31.0, 200.0], [33.0, 88.0], [32.0, 274.0], [34.0, 139.66666666666666], [35.0, 88.0], [37.0, 93.0], [36.0, 74.0], [38.0, 101.0], [39.0, 1219.0], [41.0, 90.0], [40.0, 379.0], [43.0, 94.0], [42.0, 366.0], [45.0, 162.6], [44.0, 179.0], [47.0, 137.0], [46.0, 81.14285714285714], [48.0, 123.0], [49.0, 208.0], [50.0, 136.33333333333334], [51.0, 116.2], [52.0, 477.33333333333337], [53.0, 153.5], [55.0, 217.5], [54.0, 255.6], [57.0, 88.0], [56.0, 214.45454545454544], [59.0, 439.66666666666663], [58.0, 88.57142857142857], [61.0, 109.0], [60.0, 76.55555555555556], [62.0, 190.14285714285714], [63.0, 237.25], [64.0, 184.3], [65.0, 259.7142857142857], [67.0, 82.44444444444444], [66.0, 173.0], [71.0, 294.46153846153845], [70.0, 732.0], [69.0, 243.2], [68.0, 148.5], [75.0, 148.0], [74.0, 161.25], [73.0, 123.9230769230769], [72.0, 175.52173913043484], [79.0, 90.6], [78.0, 144.5], [77.0, 76.0], [76.0, 86.0], [83.0, 287.0], [82.0, 220.33333333333331], [81.0, 188.11340206185568], [80.0, 68.0], [84.0, 123.0], [87.0, 326.5], [86.0, 76.0], [85.0, 93.0], [88.0, 81.0], [90.0, 117.99999999999997], [91.0, 80.0], [89.0, 117.0], [92.0, 127.99999999999999], [95.0, 102.0], [94.0, 87.0], [93.0, 75.5], [96.0, 79.14285714285714], [97.0, 117.83333333333333], [99.0, 99.90000000000002], [98.0, 67.0], [100.0, 100.17460317460319], [1.0, 131.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[70.93833333333338, 169.8266666666667]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 3769.0], [3.0, 4809.0], [4.0, 3136.0], [5.0, 1180.0], [6.0, 2121.0], [7.0, 1826.0], [8.0, 3518.0], [9.0, 2626.0], [10.0, 1254.0], [11.0, 2540.0], [12.0, 1876.0], [13.0, 2958.0], [14.0, 2645.0], [15.0, 2974.0], [16.0, 3718.0], [17.0, 3716.0], [18.0, 2897.0], [19.0, 3711.0], [20.0, 5467.0], [21.0, 2996.0], [22.0, 4524.5], [23.0, 3802.0], [24.0, 4233.0], [25.0, 3736.0], [26.0, 3710.0], [27.0, 3381.0], [28.0, 4012.5], [29.0, 3233.0], [30.0, 1981.0], [31.0, 5307.0], [33.0, 4584.0], [32.0, 4782.333333333333], [34.0, 2456.0], [35.0, 3985.0], [37.0, 4038.0], [36.0, 4174.0], [38.0, 4068.5], [39.0, 6240.0], [41.0, 5390.0], [40.0, 5187.0], [43.0, 5055.25], [42.0, 5329.0], [45.0, 5236.0], [44.0, 5338.5], [47.0, 5424.5], [46.0, 5109.428571428572], [48.0, 5040.285714285715], [49.0, 4133.0], [50.0, 4291.666666666667], [51.0, 4400.8], [52.0, 5112.333333333333], [53.0, 5177.75], [55.0, 5940.5], [54.0, 6166.0], [57.0, 6704.0], [56.0, 6985.727272727272], [59.0, 6721.333333333333], [58.0, 6676.428571428572], [61.0, 6903.0], [60.0, 6751.222222222223], [62.0, 7099.428571428572], [63.0, 6204.75], [64.0, 7327.166666666668], [65.0, 5851.285714285714], [67.0, 6393.222222222223], [66.0, 7356.5], [71.0, 6673.307692307692], [70.0, 938.0], [69.0, 7288.0], [68.0, 3492.5], [75.0, 8389.166666666666], [74.0, 8128.125], [73.0, 8309.76923076923], [72.0, 7901.108695652174], [79.0, 2810.2], [78.0, 10985.0], [77.0, 10614.333333333334], [76.0, 8914.0], [83.0, 576.0], [82.0, 3302.0], [81.0, 7572.762886597935], [80.0, 143.0], [84.0, 1881.0], [87.0, 636.5], [86.0, 176.0], [85.0, 275.0], [88.0, 1608.0], [90.0, 2063.6666666666665], [91.0, 160.5], [89.0, 260.5], [92.0, 3390.8461538461543], [95.0, 3264.0], [94.0, 284.5], [93.0, 2105.25], [96.0, 1546.2857142857144], [97.0, 938.1666666666666], [99.0, 254.05], [98.0, 158.0], [100.0, 2526.4444444444443], [1.0, 937.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[70.93833333333338, 5247.351666666665]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 474.2, "minX": 1.69513386E12, "maxY": 1542886.5, "series": [{"data": [[1.69513392E12, 1542886.5], [1.69513386E12, 151557.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69513392E12, 4065.8], [1.69513386E12, 474.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513392E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 164.05072463768118, "minX": 1.69513386E12, "maxY": 5427.8024911032035, "series": [{"data": [[1.69513392E12, 5257.131672597861], [1.69513386E12, 2419.8684210526317]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69513392E12, 171.55194805194802], [1.69513386E12, 164.05072463768118]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69513392E12, 5427.8024911032035], [1.69513386E12, 2578.578947368421]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513392E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 157.5526315789474, "minX": 1.69513386E12, "maxY": 5200.935943060499, "series": [{"data": [[1.69513392E12, 5200.935943060499], [1.69513386E12, 2370.3947368421054]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69513392E12, 169.58441558441564], [1.69513386E12, 163.81159420289853]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69513392E12, 168.9804270462634], [1.69513386E12, 157.5526315789474]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513392E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69513386E12, "maxY": 48.28947368421053, "series": [{"data": [[1.69513392E12, 0.0], [1.69513386E12, 0.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69513392E12, 0.0], [1.69513386E12, 21.731884057971005]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69513392E12, 2.0711743772242017], [1.69513386E12, 48.28947368421053]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513392E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 64.0, "minX": 1.69513386E12, "maxY": 14658.0, "series": [{"data": [[1.69513392E12, 14658.0], [1.69513386E12, 5059.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69513392E12, 64.0], [1.69513386E12, 66.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69513392E12, 10164.5], [1.69513386E12, 3194.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69513392E12, 13058.199999999999], [1.69513386E12, 4890.749999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69513392E12, 5542.0], [1.69513386E12, 198.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69513392E12, 11780.75], [1.69513386E12, 3774.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513392E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 85.0, "minX": 3.0, "maxY": 11938.5, "series": [{"data": [[32.0, 1105.0], [33.0, 5058.0], [34.0, 6610.5], [37.0, 6543.0], [38.0, 117.0], [39.0, 6986.0], [41.0, 3161.0], [40.0, 10130.0], [43.0, 7216.0], [46.0, 10489.5], [3.0, 4959.0], [53.0, 306.0], [52.0, 11531.5], [55.0, 7369.0], [60.0, 11938.5], [5.0, 937.0], [87.0, 87.0], [111.0, 85.0], [7.0, 4323.0], [8.0, 277.5], [12.0, 5814.0], [209.0, 88.0], [16.0, 5045.5], [18.0, 7400.0], [20.0, 6573.0], [21.0, 7204.0], [22.0, 6135.0], [23.0, 6263.0], [24.0, 7977.5], [25.0, 7054.0], [27.0, 6832.0], [28.0, 6043.0], [29.0, 7130.0], [30.0, 3728.0], [31.0, 4332.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 272.0], [40.0, 233.0], [87.0, 170.5], [22.0, 239.0], [46.0, 311.5], [25.0, 146.0], [209.0, 170.0], [52.0, 226.5], [111.0, 1259.0], [60.0, 156.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 209.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 76.0, "minX": 3.0, "maxY": 794.0, "series": [{"data": [[32.0, 152.0], [33.0, 285.5], [34.0, 143.5], [37.0, 276.0], [38.0, 101.0], [39.0, 184.0], [41.0, 129.0], [40.0, 122.5], [43.0, 135.0], [46.0, 189.0], [3.0, 100.0], [53.0, 145.0], [52.0, 167.0], [55.0, 240.0], [60.0, 141.5], [5.0, 794.0], [87.0, 86.0], [111.0, 85.0], [7.0, 140.0], [8.0, 272.0], [12.0, 86.0], [209.0, 88.0], [16.0, 141.5], [18.0, 209.0], [20.0, 139.0], [21.0, 283.0], [22.0, 246.0], [23.0, 87.0], [24.0, 219.0], [25.0, 145.0], [27.0, 208.0], [28.0, 317.0], [29.0, 302.0], [30.0, 159.5], [31.0, 200.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 147.0], [40.0, 88.5], [87.0, 90.0], [22.0, 212.0], [46.0, 147.0], [25.0, 76.0], [209.0, 88.5], [52.0, 120.5], [111.0, 139.0], [60.0, 86.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 209.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.9, "minX": 1.69513386E12, "maxY": 23.1, "series": [{"data": [[1.69513392E12, 23.1], [1.69513386E12, 6.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513392E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.69513386E12, "maxY": 13.033333333333333, "series": [{"data": [[1.69513392E12, 13.033333333333333], [1.69513386E12, 1.2666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69513392E12, 7.7], [1.69513386E12, 2.3]], "isOverall": false, "label": "302", "isController": false}, {"data": [[1.69513392E12, 5.7]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513392E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.69513386E12, "maxY": 7.7, "series": [{"data": [[1.69513392E12, 6.516666666666667], [1.69513386E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69513392E12, 2.85]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.69513392E12, 7.7], [1.69513386E12, 2.3]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.69513392E12, 2.85]], "isOverall": false, "label": "HTTP Request-1-failure", "isController": false}, {"data": [[1.69513392E12, 6.516666666666667], [1.69513386E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513392E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.69513386E12, "maxY": 20.733333333333334, "series": [{"data": [[1.69513392E12, 20.733333333333334], [1.69513386E12, 3.566666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69513392E12, 5.7]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513392E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

